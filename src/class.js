/**
 * @file
 * webappÈÄöÁî®ÁªÑ‰ª∂Âü∫Á°ÄÂ∫ìÊñá‰ª∂Ôºå‰∏ªË¶ÅÁî®‰∫éÈÄöÁî®ÁªÑ‰ª∂ÁöÑÁ±ªÁªìÊûÑÂ£∞Êòé
 * @author oupeng-fe
 * @version 1.1
 */
;(function(window, undefined) {

    "use strict";

    /**
     * ÂëΩÂêçÁ©∫Èó¥ÂâçÁºÄ üêô
     * @namespace octopus
     * @desc ÂëΩÂêçÁ©∫Èó¥ËØ¥Êòé ÊâÄÊúâÂ∞èÂÜôÂ≠óÊØçÂºÄÂ§¥ÁöÑÊñπÊ≥ïÈÉΩÂèØ‰ª•Áõ¥Êé•Ë∞ÉÁî® Â¶Çoctopus.easing.linear.easeIn
     * Áõ∏ÂèçÔºåÂ§ßÂÜôÂ≠óÊØçÂºÄÂ§¥ÁöÑÂëΩÂêçËØ¥ÊòéËØ•ÂØπË±°ÊòØ‰∏Ä‰∏™Á±ªÂØπË±° ÈúÄË¶ÅÁî®ÂÖ≥ÈîÆÂ≠ónew Â¶Ç new octopus.Widget()
     * @type {object}
     */
    var octopus,
        o = octopus = {version: "1.1"};

    /**
     * @method octopus.define
     * @desc Á±ªÁîüÊàê.Â∞ÜËøîÂõû‰∏Ä‰∏™ÂΩ¢Â¶Ç‚Äî‚Äî
     * function C() {
     *      this.initialize()
     * };
     * C.prototype = { constructor: C, ... }ÁöÑÂØπË±°
     * ÊîØÊåÅ‰∏§‰∏™ÂèÇÊï∞ÔºåÁ¨¨‰∏Ä‰∏™‰∏∫Áà∂Á±ªÔºàÂèØ‰∏çÂ≠òÂú®ÔºâÔºåÁ¨¨‰∫å‰∏™‰∏∫ÁîüÊàêÁ±ªÁöÑÂêÑÂ±ûÊÄßÊñπÊ≥ïÂØπË±° Áî±‰∫éÊØè‰∏™Á±ªÁöÑÁîüÊàêÈÉΩÂü∫‰∫éÂ≠êÁ±ªÂØπÁà∂Á±ªÂØπË±°ÁöÑÊ∑±Â∫¶Êã∑Ë¥ùÔºåÂõ†Ê≠§Ôºå
     * ‰∏∫ÈÅøÂÖçÂ≠êÁ±ªÂ±ûÊÄßÊõ¥ÊîπÂØπÁà∂Á±ªÈÄ†ÊàêÁöÑ‰∏çÂèØÊéßÂΩ±ÂìçÔºåÈô§Number|String|Boolean Â§ñÁöÑÂØπË±° ÂàùÂßãÂåñÈÉΩÂª∫ËÆÆÊîæÂú®ÊûÑÈÄ†ÂáΩÊï∞ÂΩì‰∏≠ÂéªÂÅö ÂàùÂßãÂåñÂÄºÂª∫ËÆÆ
     * ‰∏∫null
     * @example
     * var newClass = octopus.define({
     *     width: 64,
     *     length: "12px",
     *     property: null,
     *     initialize: function() {
     *         this.property = Object.create({});
     *     }
     * });
     * @return {Function}
     */
    o.define = function() {
        var len = arguments.length,
            s = arguments[0],
            i = arguments[len - 1];

        var nc = typeof i.initialize == "function" ? i.initialize :
            function() {
                s.apply(this, arguments);
        };
        if(len > 1) {
            var newArgs = [nc, s].concat(Array.prototype.slice.call(arguments).slice(1, len - 1), i);
            o.inherit.apply(null, newArgs);
        } else {
            nc.prototype = i;
            nc.prototype.constructor = nc;
        }
        return nc;
    };

    /**
     * @method octopus.inherit
     * @desc ÁªßÊâø
     * @param child {Function} Â≠êÁ±ª
     * @param father {Function} Áà∂Á±ª
     */
    o.inherit = function(child, father) {
        var f = function() {},
            cp,
            fp = father.prototype;
        f.prototype = fp;
        cp = child.prototype = new f;
        cp.constructor = child;
        var i, l, k;
        for(i = 2, l = arguments.length; i < l; i++) {
            k = arguments[i];
            if(typeof k === "function") {
                k = k.prototype;
            }
            o.extend(child.prototype, k);
        }
    };

    /**
     * @method octopus.extend
     * @desc Â∞Ü‰∏Ä‰∏™ÂØπË±°ÁöÑÂ±ûÊÄßÂ§çÂà∂ÁªôÂè¶‰∏Ä‰∏™ÂØπË±°
     * @param destination {object}
     * @param source {object}
     * @return destination {object} Â§çÂà∂ÂêéÁöÑÂØπË±°
     */
    o.extend = function(destination, source) {
        destination = destination || {};
        if(source) {
            for(var property in source) {
                var value = source[property];
                if(value !== undefined) {
                    destination[property] = value;
                }
            }
            var sourceIsEvt = typeof window.Event == "function"
                && source instanceof window.Event;

            if (!sourceIsEvt && source.hasOwnProperty && source.hasOwnProperty("toString")) {
                destination.toString = source.toString;
            }
        }
        return destination;
    };

    /**
     * @namespace octopus.util
     * @desc Â∑•ÂÖ∑ÈõÜÂêà Áõ∏ÂΩì‰∫éjqueryÁöÑfn
     * @type {object}
     */
    o.util = o.util || {};

    /**
     * @property octopus.util.lastSeqId
     * @type {String}
     */
    o.util.lastSeqId = 0;

    /**
     * @method octopus.util.createUniqueID
     * @param prefix {String} ÂâçÁºÄ
     * @return {String} ÂÖ®Â±ÄÂîØ‰∏ÄÁöÑ‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤
     */
    o.util.createUniqueID = function(prefix) {
        prefix = (prefix === null || prefix === undefined) ? "octopus" : prefix.replace(/\./g, "_");
        o.util.lastSeqId++;
        return prefix + o.util.lastSeqId;
    };

    window.octopus = o;

    if(typeof module === "object" && typeof module.exports === "object") {
        module.exports = o    
    }

})(window);